- name: Include distribution specific variables
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_facts.distribution }}-{{ ansible_facts.distribution_version }}.yml"
        - "{{ ansible_facts.os_family }}-{{ ansible_facts.distribution_major_version }}.yml"
        - "{{ ansible_facts.distribution }}.yml"
        - "{{ ansible_facts.os_family }}.yml"
        - default.yml
      paths:
        - vars
  tags:
    - caddy

- include_tasks: install-{{ ansible_facts.os_family }}.yml
  tags:
    - caddy

- name: Download custom Caddy binary
  get_url:
    url: https://caddyserver.com/api/download?os={{ _platform }}&arch={{ _architecture }}{{ _plugins }}
    dest: /usr/bin/caddy
    backup: yes
    timeout: 600
    owner: root
    group: root
    mode: '0755'
    serole: object_r
    seuser: system_u
    setype: httpd_exec_t
  when: caddy_plugins | length > 0
  notify: reload caddy
  tags:
    - caddy

- name: Set capabilities for Caddy binary
  community.general.capabilities:
    capability: cap_net_bind_service+ep
    path: /usr/bin/caddy
  when:
    - ansible_facts.distribution == 'Debian'
    - ansible_facts.distribution_major_version is version('8', '<=')

- name: Copy main Caddy config
  template:
    src: "{{ caddy_config_file }}.j2"
    dest: "{{ caddy_config_path }}/{{ caddy_config_file }}"
    lstrip_blocks: yes
    owner: root
    group: root
    mode: '0644'
    validate: caddy validate -adapter caddyfile -config %s
  notify: reload caddy
  tags:
    - caddy
    - caddy_config

- name: Create conf.d directory
  file:
    path: "{{ caddy_config_path }}/conf.d"
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags:
    - caddy

- name: Start and enable Caddy
  service:
    name: "{{ caddy_service_name }}"
    state: started
    enabled: yes
  register: service_start
  retries: 5
  until: service_start is success
  tags:
    - caddy
    - caddy_service
