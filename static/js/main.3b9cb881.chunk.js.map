{"version":3,"sources":["components/Meta.tsx","components/ProfilePicture.tsx","components/Records.tsx","service/EventService.ts","store.tsx","components/Login.tsx","components/Reset.tsx","components/Dashboard.tsx","hooks/useUserConfig.ts","App.tsx","index.tsx"],"names":["MetaContainer","styled","div","Meta","activeChannels","joinedChannels","ProfilePicture","src","width","height","alt","RecordsContainer","Records","records","map","record","RecordComponent","title","RecordConatiner","scores","score","user","profilePicture","displayName","className","id","EventService","apiBaseUrl","callback","connect","ws","WebSocket","replace","onmessage","event","JSON","parse","data","onclose","e","console","log","reason","setTimeout","onerror","err","error","close","defaultContext","state","process","twitchClientId","baseUrl","accessToken","window","localStorage","getItem","setState","setAccessToken","store","createContext","Provider","StateProvider","children","useState","value","LoginContainer","a","Login","useContext","useEffect","hash","location","match","exec","setItem","fetch","method","body","stringify","LoggedIn","url","URL","searchParams","set","href","toString","ButtonsContainer","LoggedInContainer","DashboardButton","loginText","setLoginText","to","onMouseEnter","onMouseLeave","ResetContainer","Reset","setUserConfig","onClick","Dashboard","classNames","setClassNames","onSave","undefined","userConfig","changeCounter","setChangeCounter","fetchConfig","headers","then","response","json","useDebounce","config","useUserConfig","newClassNames","slice","push","userCfg","DashboardContainer","join","type","checked","Redemptions","Bttv","Active","onChange","newConfig","target","Title","spellCheck","AppContainer","main","App","setJoinedChannels","setActiveChannels","setRecords","message","path","GlobalStyle","createGlobalStyle","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.3b9cb881.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst MetaContainer = styled.div`\n    display: inline-block;\n    background: var(--bg-bright);\n    border: 1px solid var(--bg-brighter);\n    padding: 0.5rem;\n    margin: 1rem;\n    margin-right: 0;\n    margin-bottom: 0;\n`;\n\nexport function Meta({ activeChannels, joinedChannels }: { [key: string]: number }) {\n    return <>\n        <MetaContainer>\n            Joined Channels: <strong>{joinedChannels}</strong>\n        </MetaContainer>\n        <MetaContainer>\n            Active Channels: <strong>{activeChannels}</strong>\n        </MetaContainer>\n    </>\n}","export function ProfilePicture({ src }: { src: string } = { src: \"https://static-cdn.jtvnw.net/user-default-pictures-uv/cdd517fe-def4-11e9-948e-784f43822e80-profile_image-70x70.png\" }) {\r\n    return <img src={src} width={\"30\"} height={\"30\"} alt=\"profile\" />;\r\n}","import styled from \"styled-components\";\nimport { ProfilePicture } from \"./ProfilePicture\";\nimport { Record } from \"../types/Events\";\n\nconst RecordsContainer = styled.div`\n    display: flex;\n`;\n\nexport function Records({ records }: { records: Array<Record> }) {\n    return <RecordsContainer>\n        {records.map(record => <RecordComponent key={record.title} record={record} />)}\n\n    </RecordsContainer>\n}\n\nconst RecordConatiner = styled.div`\n    background: var(--bg-bright);\n    border: 1px solid var(--bg-brighter);\n    margin: 1rem;\n    margin-right: 0;\n    padding: 1rem;\n\n    h2 {\n        color: var(--text);\n        margin: 0;\n        margin-bottom: 1rem;\n        padding: 0;\n    }\n\n    ol {\n        color: white;\n        font-size: 1.5rem;\n        font-weight: bold;\n        width: 500px;\n        padding: 0;\n        margin: 0;\n        margin-right: 15px;\n        background: var(--lightBackground);\n        border: 1px solid var(--lightBorder);\n        border-radius: 3px;\n\n        li {\n            display: flex;\n            align-items: center;\n            margin-bottom: 0.25rem;\n\n            img {\n                margin-right: 10px;\n            }\n\n            .value {\n                text-align: right;\n                flex: 1 1 auto;\n            }\n        }\n    }\n`;\n\nfunction RecordComponent({ record }: { record: Record }) {\n    return <RecordConatiner>\n        <h2>{record.title}</h2>\n        <ol>\n            {record.scores.map(score => <li key={score.user.id}>\n                <ProfilePicture src={score.user.profilePicture} />\n                <span>{score.user.displayName}</span>\n                <span className={\"value\"}>{score.score}</span>\n            </li>)}\n        </ol>\n    </RecordConatiner>\n}","import { EventMessage } from \"../types/Events\";\n\nexport default class EventService {\n    constructor(apiBaseUrl: string, callback: (data: EventMessage) => void) {\n\n        function connect() {\n            var ws = new WebSocket(`${apiBaseUrl.replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\")}/api/ws`);\n            \n            ws.onmessage = (event) => {\n                callback(JSON.parse(event.data));\n            };\n\n            ws.onclose = e => {\n                console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                setTimeout(connect, 1000);\n            };\n\n            ws.onerror = err => {\n                console.error('Socket encountered error: ', err, 'Closing socket');\n                ws.close();\n            };\n        }\n\n        connect();\n    }\n}\n\n","import { createContext, useState } from \"react\";\n\nexport interface State {\n    apiBaseUrl: string,\n    twitchClientId: string,\n    baseUrl: string,\n    accessToken: string | null,\n}\n\nexport type Action = Record<string, unknown>;\n\nconst defaultContext = {\n    state: {\n        apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\n        twitchClientId: process.env.REACT_APP_TWITCH_CLIENT_ID,\n        baseUrl: process.env.REACT_APP_BASE_URL,\n        accessToken: window.localStorage.getItem(\"accessToken\")\n    } as State,\n    setState: (state: State) => { },\n    setAccessToken: (accessToken: string) => { },\n};\n\nconst store = createContext(defaultContext);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }: { children: JSX.Element }): JSX.Element => {\n    const [state, setState] = useState({ ...defaultContext.state });\n\n    const setAccessToken = (accessToken: string) => setState({...state, accessToken});\n\n    return <Provider value={{ state, setState, setAccessToken }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","import { useContext, useEffect, useState } from \"react\";\nimport { store } from \"./../store\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst LoginContainer = styled.a`\n    position: absolute;\n    display: block;\n    color: white;\n    top: 1rem;\n    right: 1rem;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--twitch);\n\n    &:hover {\n        background: var(--twitch-dark);\n    }\n`;\n\nexport function Login() {\n    const {state, setAccessToken} = useContext(store);\n\n    useEffect(() => {\n        const hash = window.location.hash;\n        window.location.hash = \"\";\n        if (hash) {\n            const reg = /#access_token=(\\w*)&/ig;\n            const match = reg.exec(hash);\n            if (!match || typeof match[1] === \"undefined\") {\n                return;\n            }\n\n            if (match[1] ){\n                window.localStorage.setItem(\"accessToken\", match[1]);\n                setAccessToken(match[1]);\n            }\n        }\n    }, [state.apiBaseUrl, setAccessToken]);\n\n    useEffect(() => {\n        if (state.accessToken) {\n            fetch(state.apiBaseUrl + \"/api/oauth\", {\n                method: 'post',\n                body: JSON.stringify({accessToken: state.accessToken})\n            })\n            // validate accessToken\n        }\n    }, [state.accessToken, state.apiBaseUrl]);\n\n    if (state.accessToken) {\n        return <LoggedIn />;\n    }\n\n    const url = new URL(\"https://id.twitch.tv/oauth2/authorize\")\n    url.searchParams.set(\"client_id\", state.twitchClientId);\n    url.searchParams.set(\"redirect_uri\", state.baseUrl);\n    url.searchParams.set(\"response_type\", \"token\");\n    url.searchParams.set(\"scope\", \"channel:read:redemptions,channel:read:redemptions\");\n\n    return <LoginContainer href={url.toString()}>Login</LoginContainer>;\n}\n\nconst ButtonsContainer = styled.div`\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    display: flex;\n\n    a {\n        text-decoration: none;\n    }\n`;\n\nconst LoggedInContainer = styled.a`\n    display: block;\n    color: white;\n    width: 150px;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--twitch);\n    cursor: pointer;\n\n    &:hover {\n        background: var(--twitch-dark);\n    }\n`;\n\nconst DashboardButton = styled.div`\n    display: block;\n    color: white;\n    margin-right: 1rem;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--theme2-dark);\n    cursor: pointer;\n\n    &.dashboard {\n        background: var(--theme);\n\n        &:hover {\n        background: var(--theme-bright);\n    }\n    }\n\n    &:hover {\n        background: var(--theme2);\n    }\n`;\n\nfunction LoggedIn() {\n    const {state} = useContext(store);\n    const [loginText, setLoginText] = useState(\"Logged In\");\n\n    const url = new URL(\"https://id.twitch.tv/oauth2/authorize\")\n    url.searchParams.set(\"client_id\", state.twitchClientId);\n    url.searchParams.set(\"redirect_uri\", state.baseUrl);\n    url.searchParams.set(\"response_type\", \"token\");\n    url.searchParams.set(\"scope\", \"channel:read:redemptions\");\n\n    return <ButtonsContainer>\n        <Link to=\"/\">\n            <DashboardButton>\n                Home\n            </DashboardButton>\n        </Link>\n        <Link to=\"/dashboard\">\n            <DashboardButton className=\"dashboard\">\n                Dashboard\n            </DashboardButton>\n        </Link>\n        <LoggedInContainer href={url.toString()} onMouseEnter={() => setLoginText(\"force login\")} onMouseLeave={() => setLoginText(\"Logged In\")}>\n            {loginText}\n        </LoggedInContainer>\n    </ButtonsContainer>;\n}","import styled from \"styled-components\";\nimport { UserConfig } from \"../hooks/useUserConfig\";\n\n\nconst ResetContainer = styled.div`\n    position: absolute;\n    top: 1rem;\n    left: 1rem;\n    display: block;\n    color: white;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--danger-dark);\n    cursor: pointer;\n\n    &:hover {\n        background: var(--danger);\n    }\n`;\n\nexport function Reset({ setUserConfig }: { setUserConfig: (userConfig: UserConfig | null) => void }) {\n    return <ResetContainer onClick={() => setUserConfig(null)}>Reset</ResetContainer>;\n}","import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useUserConfig } from \"../hooks/useUserConfig\";\nimport { Reset } from \"./Reset\";\n\nexport function Dashboard() {\n    const [classNames, setClassNames] = useState([\"userConfig\"]);\n\n    const [userCfg, setUserConfig] = useUserConfig(() => {\n        const newClassNames = classNames.slice();\n        newClassNames.push(\"saved\");\n        setClassNames(newClassNames)\n\n        setTimeout(() => {\n            setClassNames([\"userConfig\"]);\n        }, 500);\n    });\n\n    return <DashboardContainer>\n        {userCfg && <Reset setUserConfig={setUserConfig} />}\n        {userCfg && <div className={classNames.join(\" \")}>\n            <div className={\"redemption\"}>\n                <img src=\"/images/bttv.png\" alt={\"bttv\"} />\n                <label className=\"switch\">\n                    <input type=\"checkbox\" checked={userCfg.Redemptions.Bttv.Active} onChange={(e) => {\n                        const newConfig = JSON.parse(JSON.stringify(userCfg));\n                        newConfig.Redemptions.Bttv.Active = e.target.checked;\n\n                        setUserConfig(newConfig);\n                    }} />\n                    <span className=\"slider round\"></span>\n                </label>\n                <div className=\"redemption-title\">\n                    <span>Channel Points Reward Name</span>\n                    <input type=\"text\" value={userCfg.Redemptions.Bttv.Title} spellCheck={false} onChange={(e) => {\n                        const newConfig = JSON.parse(JSON.stringify(userCfg));\n                        newConfig.Redemptions.Bttv.Title = e.target.value;\n\n                        setUserConfig(newConfig);\n                    }} />\n                </div>\n                <span className=\"hint\">\n                    make sure <strong>gempbot</strong> is bttv editor\n                </span>\n            </div>\n        </div>}\n    </DashboardContainer>\n}\n\nconst DashboardContainer = styled.div`\n    margin-top: 5rem;\n    margin-left: 1rem;\n    margin-right: 1rem;\n\n    .userConfig {\n        padding-bottom: 2rem;\n        background: var(--bg);\n        transition: background-color ease-in-out 0.2s;\n\n        &.saved {\n            background: var(--theme);\n        }\n    }\n\n    .redemption {\n        display: flex;\n        align-items: center;\n        background: var(--bg-bright);\n        border: 1px solid var(--bg-brighter);\n        padding: 0.5rem;\n\n        img {\n            max-height: 3rem;\n            margin-left: 1rem;\n            margin-right: 2rem;\n        }\n\n        .redemption-title {\n            position: relative;\n\n            span {\n                position: absolute;\n                top: -13px;\n                left: 18px;\n                font-size: 11px;\n            }\n\n            input {\n                margin: 0;\n                padding: 0;\n                margin-left: 1rem;\n                font-size: 1rem;\n                background: var(--bg);\n                border: 1px solid var(--bg-bright);\n                padding: 5px;\n                color: white;\n\n                &:focus {\n                    outline: none;\n                    border: 1px solid var(--theme2);\n                }\n            }\n        }\n        \n        .hint {\n            margin-left: 1rem;\n\n            strong {\n                color: var(--theme-bright);\n            }\n        }\n    }\n\n    /* The switch - the box around the slider */\n    .switch {\n        position: relative;\n        display: inline-block;\n        width: 60px;\n        height: 34px;\n\n        input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n        }\n    }\n    /* The slider */\n    .slider {\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: #ccc;\n        -webkit-transition: .4s;\n        transition: .4s;\n\n        &:before {\n            position: absolute;\n            content: \"\";\n            height: 26px;\n            width: 26px;\n            left: 4px;\n            bottom: 4px;\n            background-color: white;\n            -webkit-transition: .4s;\n            transition: .4s;\n        }\n    }\n\n    input:checked + .slider {\n        background-color: var(--theme-bright);\n    }\n\n    input:focus + .slider {\n     box-shadow: 0 0 1px var(--theme-bright);\n    }\n\n    input:checked + .slider:before {\n        -webkit-transform: translateX(26px);\n        -ms-transform: translateX(26px);\n        transform: translateX(26px);\n    }\n\n    .slider.round {\n        border-radius: 34px;\n\n        &:before {\n            border-radius: 50%;\n        }\n    }\n`;","import { useContext, useEffect, useState } from \"react\";\nimport { useDebounce } from \"react-use\";\nimport { store } from \"../store\";\n\nexport interface UserConfig {\n    Redemptions: Redemptions;\n}\n\nexport interface Redemptions {\n    Bttv: Redemption;\n}\n\nexport interface Redemption {\n    Title: string;\n    Active: boolean;\n}\n\n\nexport function useUserConfig(onSave: () => void): [UserConfig | null | undefined, (userConfig: UserConfig | null) => void] {\n    const { accessToken, apiBaseUrl } = useContext(store).state;\n\n    const [userConfig, setUserConfig] = useState<UserConfig | null | undefined>(undefined);\n    const [changeCounter, setChangeCounter] = useState(0);\n\n    const fetchConfig = () => {\n        if (accessToken) {\n            fetch(apiBaseUrl + \"/api/userConfig\", { headers: { accessToken } })\n                .then(response => response.json())\n                .then((userConfig) => setUserConfig(userConfig));\n        }\n    };\n\n    useEffect(fetchConfig, [accessToken, apiBaseUrl]);\n\n\n    useDebounce(() => {\n        if (changeCounter && userConfig && accessToken) {\n            fetch(apiBaseUrl + \"/api/userConfig\", { headers: { accessToken }, method: \"POST\", body: JSON.stringify(userConfig) }).then(onSave);\n        } else if (changeCounter && userConfig === null && accessToken) {\n            fetch(apiBaseUrl + \"/api/userConfig\", { headers: { accessToken }, method: \"DELETE\"}).then(fetchConfig);\n        }\n    }, 500, [changeCounter]);\n\n    const setCfg = (config: UserConfig | null) => {\n        setUserConfig(config);\n        setChangeCounter(changeCounter + 1);\n    };\n\n    return [userConfig, setCfg]\n}","import { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Meta } from \"./components/Meta\";\nimport { Records } from \"./components/Records\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport EventService from \"./service/EventService\";\nimport { store } from \"./store\";\nimport { EventMessage, Record } from \"./types/Events\";\nimport { Login } from \"./components/Login\";\nimport { Dashboard } from \"./components/Dashboard\";\n\nconst AppContainer = styled.main`\n    \n`\n\nexport function App() {\n    const { state } = useContext(store);\n    const [joinedChannels, setJoinedChannels] = useState(0);\n    const [activeChannels, setActiveChannels] = useState(0);\n    const [records, setRecords] = useState<Array<Record>>([]);\n\n    useEffect(() => {\n        new EventService(state.apiBaseUrl, (message: EventMessage) => {\n            setJoinedChannels(message.joinedChannels);\n            setActiveChannels(message.activeChannels);\n            setRecords(message.records);\n        });\n    }, [state.apiBaseUrl]);\n\n    return <AppContainer>\n        <Router>\n            <Login />\n            <Switch>\n                <Route path=\"/dashboard\">\n                    <Dashboard />\n                </Route>\n                <Route path=\"/\">\n                    <Meta activeChannels={activeChannels} joinedChannels={joinedChannels} />\n                    <Records records={records} />\n                </Route>\n            </Switch>\n        </Router>\n\n    </AppContainer>\n}","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport { App } from './App';\nimport { StateProvider } from './store';\n\nconst GlobalStyle = createGlobalStyle`\n    body {\n        --bg: #0e0e10;\n        --bg-bright: #18181b;\n        --bg-brighter: #3d4146;\n        --bg-dark: #121416;\n        --theme: #009148;\n        --theme-bright: #00a552;\n        --theme2: #2980b9;\n        --theme2-bright: #3498db;\n        --theme2-dark: #24618a;\n        --text: #F5F5F5;\n        --text-dark: #616161;\n        --twitch: #6441a5;\n        --twitch-dark: #4c317e;\n        --danger: #e74c3c;\n        --danger-dark: #c0392b;\n\n        background: var(--bg);\n        margin: 0;\n        padding: 0;\n        color: var(--text);\n        margin: 0;\n        font-family: Helvetica, Arial, sans-serif;\n        height: 100%;\n        width: 100%;\n\n        * {\n            box-sizing: border-box;\n        }\n    }\n`\n\nReactDOM.render(\n    <StrictMode>\n        <StateProvider>\n            <React.Fragment>\n                <GlobalStyle />\n                <App />\n            </React.Fragment>\n        </StateProvider>\n    </StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}