{"version":3,"sources":["service/checkToken.ts","store.tsx","components/Reset.tsx","components/Rewards.tsx","components/Dashboard.tsx","hooks/useUserConfig.ts","hooks/useRewards.ts","components/Login.tsx","components/Meta.tsx","components/ProfilePicture.tsx","components/Records.tsx","service/EventService.ts","App.tsx","index.tsx"],"names":["checkToken","setScToken","response","status","defaultContext","state","apiBaseUrl","process","twitchClientId","baseUrl","scToken","window","localStorage","getItem","setState","store","createContext","Provider","StateProvider","children","useState","value","removeItem","setItem","ResetContainer","styled","div","Reset","setUserConfig","onClick","RewardsContainer","RewardContainer","Rewards","rewards","map","reward","className","src","image","url_2x","default_image","alt","title","prompt","id","Dashboard","classNames","setClassNames","onSave","useContext","undefined","userConfig","changeCounter","setChangeCounter","fetchConfig","fetch","headers","Authorization","then","json","catch","useEffect","useDebounce","method","body","JSON","stringify","config","useUserConfig","newClassNames","slice","push","setTimeout","userCfg","setRewards","data","useRewards","DashboardContainer","join","type","checked","Redemptions","Bttv","Active","onChange","e","newConfig","parse","target","Title","spellCheck","LoginContainer","a","Login","LoggedIn","href","createOAuthUrl","toString","ButtonsContainer","LoggedInContainer","DashboardButton","loginText","setLoginText","to","onMouseEnter","onMouseLeave","clientId","url","URL","searchParams","set","MetaContainer","Meta","activeChannels","joinedChannels","ProfilePicture","width","height","RecordsContainer","Records","records","record","RecordComponent","RecordConatiner","scores","score","user","profilePicture","displayName","EventService","callback","connect","ws","WebSocket","replace","onmessage","event","onclose","console","log","reason","onerror","err","error","close","AppContainer","main","App","setJoinedChannels","setActiveChannels","setRecords","useCookie","cookie","message","path","GlobalStyle","createGlobalStyle","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.fc592e6b.chunk.js","sourcesContent":["export function checkToken(setScToken: (scToken: string | null) => void, response: Response) {\n    if (response.status === 403) {\n        setScToken(null);\n    }\n\n    return response\n}","import { createContext, useState } from \"react\";\n\nexport interface State {\n    apiBaseUrl: string,\n    twitchClientId: string,\n    baseUrl: string,\n    scToken: string | null,\n}\n\nexport type Action = Record<string, unknown>;\n\nconst defaultContext = {\n    state: {\n        apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\n        twitchClientId: process.env.REACT_APP_TWITCH_CLIENT_ID,\n        baseUrl: process.env.REACT_APP_BASE_URL,\n        scToken: window.localStorage.getItem(\"scToken\")\n    } as State,\n    setState: (state: State) => { },\n    setScToken: (scToken: string | null) => { },\n};\n\nconst store = createContext(defaultContext);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }: { children: JSX.Element }): JSX.Element => {\n    const [state, setState] = useState({ ...defaultContext.state });\n\n    const setScToken = (scToken: string | null) => {\n        if (scToken === null) {\n            window.localStorage.removeItem(\"scToken\");\n        } else {\n            window.localStorage.setItem(\"scToken\", scToken);\n        }\n\n        setState({...state, scToken});\n    };\n\n    return <Provider value={{ state, setState, setScToken }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","import styled from \"styled-components\";\nimport { UserConfig } from \"../hooks/useUserConfig\";\n\n\nconst ResetContainer = styled.div`\n    position: absolute;\n    top: 1rem;\n    left: 1rem;\n    display: block;\n    color: white;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--danger-dark);\n    cursor: pointer;\n\n    &:hover {\n        background: var(--danger);\n    }\n`;\n\nexport function Reset({ setUserConfig }: { setUserConfig: (userConfig: UserConfig | null) => void }) {\n    return <ResetContainer onClick={() => setUserConfig(null)}>Reset</ResetContainer>;\n}","import styled from \"styled-components\";\nimport { Reward as RewardInterface } from \"../hooks/useRewards\";\n\nconst RewardsContainer = styled.div`\n    display: grid;\n    grid-gap: 1rem;\n`;\n\nconst RewardContainer = styled.div`\n    background: var(--bg-bright);\n    border: 1px solid var(--bg-brighter);\n    padding: 0.5rem;\n\n    .container {\n        display: grid;\n        grid-template-columns: 56px 1fr;\n        grid-gap: 1rem;\n    }\n`;\n\nexport function Rewards({ rewards }: { rewards: Array<RewardInterface> }) {\n    return <RewardsContainer>\n        {rewards.map(reward => <RewardContainer key={reward.id}>\n            <div className=\"container\">\n                <img src={reward.image?.url_2x ?? reward.default_image.url_2x} alt={reward.title} />\n                <div>\n                    <h5>{reward.title}</h5>\n                    <p>{reward.prompt}</p>\n                </div>\n            </div>\n        </RewardContainer>)}\n    </RewardsContainer>\n\n}","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useRewards } from \"../hooks/useRewards\";\nimport { useUserConfig } from \"../hooks/useUserConfig\";\nimport { Reset } from \"./Reset\";\nimport { Rewards } from \"./Rewards\";\n\nexport function Dashboard() {\n    const [classNames, setClassNames] = useState([\"userConfig\"]);\n\n    const [userCfg, setUserConfig] = useUserConfig(() => {\n        const newClassNames = classNames.slice();\n        newClassNames.push(\"saved\");\n        setClassNames(newClassNames)\n\n        setTimeout(() => {\n            setClassNames([\"userConfig\"]);\n        }, 500);\n    });\n\n    const [rewards] = useRewards();\n\n    return <DashboardContainer>\n        {userCfg && <Reset setUserConfig={setUserConfig} />}\n        {userCfg && <div className={classNames.join(\" \")}>\n            <div className={\"redemption\"}>\n                <img src=\"/images/bttv.png\" alt={\"bttv\"} />\n                <label className=\"switch\">\n                    <input type=\"checkbox\" checked={userCfg.Redemptions.Bttv.Active} onChange={(e) => {\n                        const newConfig = JSON.parse(JSON.stringify(userCfg));\n                        newConfig.Redemptions.Bttv.Active = e.target.checked;\n\n                        setUserConfig(newConfig);\n                    }} />\n                    <span className=\"slider round\"></span>\n                </label>\n                <div className=\"redemption-title\">\n                    <span>Channel Points Reward Name</span>\n                    <input type=\"text\" value={userCfg.Redemptions.Bttv.Title} spellCheck={false} onChange={(e) => {\n                        const newConfig = JSON.parse(JSON.stringify(userCfg));\n                        newConfig.Redemptions.Bttv.Title = e.target.value;\n\n                        setUserConfig(newConfig);\n                    }} />\n                </div>\n                <span className=\"hint\">\n                    make sure <strong>gempbot</strong> is bttv editor\n                </span>\n            </div>\n        </div>}\n        <Rewards rewards={rewards} />\n    </DashboardContainer>\n}\n\nconst DashboardContainer = styled.div`\n    margin-top: 5rem;\n    margin-left: 1rem;\n    margin-right: 1rem;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 2rem;\n\n    .userConfig {\n        padding-bottom: 2rem;\n        background: var(--bg);\n        transition: background-color ease-in-out 0.2s;\n\n        &.saved {\n            background: var(--theme);\n        }\n    }\n\n    .redemption {\n        display: flex;\n        align-items: center;\n        background: var(--bg-bright);\n        border: 1px solid var(--bg-brighter);\n        padding: 0.5rem;\n\n        img {\n            max-height: 3rem;\n            margin-left: 1rem;\n            margin-right: 2rem;\n        }\n\n        .redemption-title {\n            position: relative;\n\n            span {\n                position: absolute;\n                top: -13px;\n                left: 18px;\n                font-size: 11px;\n            }\n\n            input {\n                margin: 0;\n                padding: 0;\n                margin-left: 1rem;\n                font-size: 1rem;\n                background: var(--bg);\n                border: 1px solid var(--bg-bright);\n                padding: 5px;\n                color: white;\n\n                &:focus {\n                    outline: none;\n                    border: 1px solid var(--theme2);\n                }\n            }\n        }\n        \n        .hint {\n            margin-left: 1rem;\n\n            strong {\n                color: var(--theme-bright);\n            }\n        }\n    }\n\n    /* The switch - the box around the slider */\n    .switch {\n        position: relative;\n        display: inline-block;\n        width: 60px;\n        height: 34px;\n\n        input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n        }\n    }\n    /* The slider */\n    .slider {\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: #ccc;\n        -webkit-transition: .4s;\n        transition: .4s;\n\n        &:before {\n            position: absolute;\n            content: \"\";\n            height: 26px;\n            width: 26px;\n            left: 4px;\n            bottom: 4px;\n            background-color: white;\n            -webkit-transition: .4s;\n            transition: .4s;\n        }\n    }\n\n    input:checked + .slider {\n        background-color: var(--theme-bright);\n    }\n\n    input:focus + .slider {\n     box-shadow: 0 0 1px var(--theme-bright);\n    }\n\n    input:checked + .slider:before {\n        -webkit-transform: translateX(26px);\n        -ms-transform: translateX(26px);\n        transform: translateX(26px);\n    }\n\n    .slider.round {\n        border-radius: 34px;\n\n        &:before {\n            border-radius: 50%;\n        }\n    }\n`;","import { useContext, useEffect, useState } from \"react\";\nimport { useDebounce } from \"react-use\";\nimport { checkToken } from \"../service/checkToken\";\nimport { store } from \"../store\";\n\nexport interface UserConfig {\n    Redemptions: Redemptions;\n}\n\nexport interface Redemptions {\n    Bttv: Redemption;\n}\n\nexport interface Redemption {\n    Title: string;\n    Active: boolean;\n}\n\n\nexport function useUserConfig(onSave: () => void): [UserConfig | null | undefined, (userConfig: UserConfig | null) => void] {\n    const { scToken, apiBaseUrl } = useContext(store).state;\n    const { setScToken } = useContext(store);\n\n    const [userConfig, setUserConfig] = useState<UserConfig | null | undefined>(undefined);\n    const [changeCounter, setChangeCounter] = useState(0);\n\n    const fetchConfig = () => {\n        if (scToken) {\n            fetch(apiBaseUrl + \"/api/userConfig\", { headers: { Authorization: \"Bearer \" + scToken } })\n                .then(response => checkToken(setScToken, response))\n                .then(response => response.json())\n                .then((userConfig) => setUserConfig(userConfig))\n                .catch();\n        }\n    };\n\n    useEffect(fetchConfig, [scToken, apiBaseUrl, setScToken]);\n\n\n    useDebounce(() => {\n        if (changeCounter && userConfig && scToken) {\n            fetch(apiBaseUrl + \"/api/userConfig\", { headers: { Authorization: \"Bearer \" + scToken }, method: \"POST\", body: JSON.stringify(userConfig) })\n            .then(response => checkToken(setScToken, response))\n            .then(onSave);\n        } else if (changeCounter && userConfig === null && scToken) {\n            fetch(apiBaseUrl + \"/api/userConfig\", { headers: { Authorization: \"Bearer \" + scToken }, method: \"DELETE\"})\n            .then(response => checkToken(setScToken, response))\n            .then(fetchConfig);\n        }\n    }, 500, [changeCounter]);\n\n    const setCfg = (config: UserConfig | null) => {\n        setUserConfig(config);\n        setChangeCounter(changeCounter + 1);\n    };\n\n    return [userConfig, setCfg]\n}","import { useContext, useEffect, useState } from \"react\";\nimport { checkToken } from \"../service/checkToken\";\nimport { store } from \"../store\";\n\nexport interface Reward {\n    broadcaster_name: string;\n    broadcaster_login: string;\n    broadcaster_id: string;\n    id: string;\n    image: Image | null;\n    background_color: string;\n    is_enabled: boolean;\n    cost: number;\n    title: string;\n    prompt: string;\n    is_user_input_required: boolean;\n    max_per_stream_setting: MaxPerStreamSetting;\n    max_per_user_per_stream_setting: MaxPerUserPerStreamSetting;\n    global_cooldown_setting: GlobalCooldownSetting;\n    is_paused: boolean;\n    is_in_stock: boolean;\n    default_image: Image;\n    should_redemptions_skip_request_queue: boolean;\n    redemptions_redeemed_current_stream: null;\n    cooldown_expires_at: null;\n}\n\nexport interface Image {\n    url_1x: string;\n    url_2x: string;\n    url_4x: string;\n}\n\nexport interface GlobalCooldownSetting {\n    is_enabled: boolean;\n    global_cooldown_seconds: number;\n}\n\nexport interface MaxPerStreamSetting {\n    is_enabled: boolean;\n    max_per_stream: number;\n}\n\nexport interface MaxPerUserPerStreamSetting {\n    is_enabled: boolean;\n    max_per_user_per_stream: number;\n}\n\nexport function useRewards() {\n    const { scToken, apiBaseUrl } = useContext(store).state;\n    const { setScToken } = useContext(store);\n\n    const [rewards, setRewards] = useState<Array<Reward>>([]);\n\n    const fetchRewards = () => {\n        if (scToken) {\n            fetch(apiBaseUrl + \"/api/rewards\", { headers: { Authorization: \"Bearer \" + scToken } })\n                .then(response => checkToken(setScToken, response))\n                .then(response => response.json())\n                .then(response => setRewards(response.data))\n                .catch();\n        }\n    };\n\n    useEffect(fetchRewards, [scToken, apiBaseUrl, setScToken]);\n\n    return [rewards];\n}\n\n","import { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { store } from \"./../store\";\n\nconst LoginContainer = styled.a`\n    position: absolute;\n    display: block;\n    color: white;\n    top: 1rem;\n    right: 1rem;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--twitch);\n\n    &:hover {\n        background: var(--twitch-dark);\n    }\n`;\n\nexport function Login() {\n    const { state } = useContext(store);\n    \n    if (state.scToken) {\n        return <LoggedIn />;\n    }\n\n    return <LoginContainer href={createOAuthUrl(state.twitchClientId, state.apiBaseUrl).toString()}>Login</LoginContainer>;\n}\n\nconst ButtonsContainer = styled.div`\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    display: flex;\n\n    a {\n        text-decoration: none;\n    }\n`;\n\nconst LoggedInContainer = styled.a`\n    display: block;\n    color: white;\n    width: 150px;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--twitch);\n    cursor: pointer;\n\n    &:hover {\n        background: var(--twitch-dark);\n    }\n`;\n\nconst DashboardButton = styled.div`\n    display: block;\n    color: white;\n    margin-right: 1rem;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--theme2-dark);\n    cursor: pointer;\n\n    &.dashboard {\n        background: var(--theme);\n\n        &:hover {\n        background: var(--theme-bright);\n    }\n    }\n\n    &:hover {\n        background: var(--theme2);\n    }\n`;\n\nfunction LoggedIn() {\n    const { state } = useContext(store);\n    const [loginText, setLoginText] = useState(\"Logged In\");\n\n    return <ButtonsContainer>\n        <Link to=\"/\">\n            <DashboardButton>\n                Home\n            </DashboardButton>\n        </Link>\n        <Link to=\"/dashboard\">\n            <DashboardButton className=\"dashboard\">\n                Dashboard\n            </DashboardButton>\n        </Link>\n        <LoggedInContainer href={createOAuthUrl(state.twitchClientId, state.apiBaseUrl).toString()} onMouseEnter={() => setLoginText(\"force login\")} onMouseLeave={() => setLoginText(\"Logged In\")}>\n            {loginText}\n        </LoggedInContainer>\n    </ButtonsContainer>;\n}\n\nfunction createOAuthUrl(clientId: string, apiBaseUrl: string): URL {\n    const url = new URL(\"https://id.twitch.tv/oauth2/authorize\")\n    url.searchParams.set(\"client_id\", clientId);\n    url.searchParams.set(\"redirect_uri\", apiBaseUrl + \"/api/callback\");\n    url.searchParams.set(\"response_type\", \"code\");\n    url.searchParams.set(\"claims\", JSON.stringify({ \"userinfo\": { \"picture\": null, \"preferred_username\": null, } }));\n    url.searchParams.set(\"scope\", \"channel:read:redemptions channel:manage:redemptions\");\n\n    return url;\n}","import styled from \"styled-components\";\n\nconst MetaContainer = styled.div`\n    display: inline-block;\n    background: var(--bg-bright);\n    border: 1px solid var(--bg-brighter);\n    padding: 0.5rem;\n    margin: 1rem;\n    margin-right: 0;\n    margin-bottom: 0;\n`;\n\nexport function Meta({ activeChannels, joinedChannels }: { [key: string]: number }) {\n    return <>\n        <MetaContainer>\n            Joined Channels: <strong>{joinedChannels}</strong>\n        </MetaContainer>\n        <MetaContainer>\n            Active Channels: <strong>{activeChannels}</strong>\n        </MetaContainer>\n    </>\n}","export function ProfilePicture({ src }: { src: string } = { src: \"https://static-cdn.jtvnw.net/user-default-pictures-uv/cdd517fe-def4-11e9-948e-784f43822e80-profile_image-70x70.png\" }) {\r\n    return <img src={src} width={\"30\"} height={\"30\"} alt=\"profile\" />;\r\n}","import styled from \"styled-components\";\nimport { ProfilePicture } from \"./ProfilePicture\";\nimport { Record } from \"../types/Events\";\n\nconst RecordsContainer = styled.div`\n    display: flex;\n`;\n\nexport function Records({ records }: { records: Array<Record> }) {\n    return <RecordsContainer>\n        {records.map(record => <RecordComponent key={record.title} record={record} />)}\n\n    </RecordsContainer>\n}\n\nconst RecordConatiner = styled.div`\n    background: var(--bg-bright);\n    border: 1px solid var(--bg-brighter);\n    margin: 1rem;\n    margin-right: 0;\n    padding: 1rem;\n\n    h2 {\n        color: var(--text);\n        margin: 0;\n        margin-bottom: 1rem;\n        padding: 0;\n    }\n\n    ol {\n        color: white;\n        font-size: 1.5rem;\n        font-weight: bold;\n        width: 500px;\n        padding: 0;\n        margin: 0;\n        margin-right: 15px;\n        background: var(--lightBackground);\n        border: 1px solid var(--lightBorder);\n        border-radius: 3px;\n\n        li {\n            display: flex;\n            align-items: center;\n            margin-bottom: 0.25rem;\n\n            img {\n                margin-right: 10px;\n            }\n\n            .value {\n                text-align: right;\n                flex: 1 1 auto;\n            }\n        }\n    }\n`;\n\nfunction RecordComponent({ record }: { record: Record }) {\n    return <RecordConatiner>\n        <h2>{record.title}</h2>\n        <ol>\n            {record.scores.map(score => <li key={score.user.id}>\n                <ProfilePicture src={score.user.profilePicture} />\n                <span>{score.user.displayName}</span>\n                <span className={\"value\"}>{score.score}</span>\n            </li>)}\n        </ol>\n    </RecordConatiner>\n}","import { EventMessage } from \"../types/Events\";\n\nexport default class EventService {\n    constructor(apiBaseUrl: string, callback: (data: EventMessage) => void) {\n\n        function connect() {\n            var ws = new WebSocket(`${apiBaseUrl.replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\")}/api/ws`);\n            \n            ws.onmessage = (event) => {\n                callback(JSON.parse(event.data));\n            };\n\n            ws.onclose = e => {\n                console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                setTimeout(connect, 1000);\n            };\n\n            ws.onerror = err => {\n                console.error('Socket encountered error: ', err, 'Closing socket');\n                ws.close();\n            };\n        }\n\n        connect();\n    }\n}\n\n","import { useContext, useEffect, useState } from \"react\";\nimport {\n    BrowserRouter as Router,\n\n    Route, Switch\n} from \"react-router-dom\";\nimport { useCookie } from \"react-use\";\nimport styled from \"styled-components\";\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Login } from \"./components/Login\";\nimport { Meta } from \"./components/Meta\";\nimport { Records } from \"./components/Records\";\nimport EventService from \"./service/EventService\";\nimport { store } from \"./store\";\nimport { EventMessage, Record } from \"./types/Events\";\n\nconst AppContainer = styled.main``;\n\nexport function App() {\n    const { state, setScToken } = useContext(store);\n    const [joinedChannels, setJoinedChannels] = useState(0);\n    const [activeChannels, setActiveChannels] = useState(0);\n    const [records, setRecords] = useState<Array<Record>>([]);\n\n    const [cookie] = useCookie(\"scToken\");\n    useEffect(() => {\n        if (cookie && state.scToken !== cookie) {\n            setScToken(cookie);\n        }\n    }, [cookie, setScToken, state.scToken]);\n\n    \n    useEffect(() => {\n        new EventService(state.apiBaseUrl, (message: EventMessage) => {\n            setJoinedChannels(message.joinedChannels);\n            setActiveChannels(message.activeChannels);\n            setRecords(message.records);\n        });\n    }, [state.apiBaseUrl]);\n\n    return <AppContainer>\n        <Router>\n            <Login />\n            <Switch>\n                <Route path=\"/dashboard\">\n                    <Dashboard />\n                </Route>\n                <Route path=\"/\">\n                    <Meta activeChannels={activeChannels} joinedChannels={joinedChannels} />\n                    <Records records={records} />\n                </Route>\n            </Switch>\n        </Router>\n\n    </AppContainer>\n}","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport { App } from './App';\nimport { StateProvider } from './store';\n\nconst GlobalStyle = createGlobalStyle`\n    body {\n        --bg: #0e0e10;\n        --bg-bright: #18181b;\n        --bg-brighter: #3d4146;\n        --bg-dark: #121416;\n        --theme: #009148;\n        --theme-bright: #00a552;\n        --theme2: #2980b9;\n        --theme2-bright: #3498db;\n        --theme2-dark: #24618a;\n        --text: #F5F5F5;\n        --text-dark: #616161;\n        --twitch: #6441a5;\n        --twitch-dark: #4c317e;\n        --danger: #e74c3c;\n        --danger-dark: #c0392b;\n\n        background: var(--bg);\n        margin: 0;\n        padding: 0;\n        color: var(--text);\n        margin: 0;\n        font-family: Helvetica, Arial, sans-serif;\n        height: 100%;\n        width: 100%;\n\n        * {\n            box-sizing: border-box;\n        }\n    }\n`\n\nReactDOM.render(\n    <StrictMode>\n        <StateProvider>\n            <React.Fragment>\n                <GlobalStyle />\n                <App />\n            </React.Fragment>\n        </StateProvider>\n    </StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}