{"version":3,"sources":["service/doFetch.ts","service/cookie.ts","components/Reset.tsx","components/Rewards.tsx","components/Dashboard.tsx","hooks/useUserConfig.ts","hooks/useRewards.ts","store.tsx","components/Login.tsx","components/Meta.tsx","components/ProfilePicture.tsx","components/Records.tsx","service/EventService.ts","App.tsx","index.tsx"],"names":["Method","getCookie","name","v","document","cookie","match","doFetch","method","path","a","body","undefined","token","headers","Authorization","config","JSON","stringify","window","fetch","process","then","response","status","location","assign","ok","json","text","errorMessage","Promise","reject","Error","ResetContainer","styled","div","Reset","setUserConfig","onClick","confirm","RewardsContainer","RewardContainer","Rewards","rewards","map","reward","className","src","image","url_2x","default_image","alt","title","prompt","id","Dashboard","useState","classNames","setClassNames","onSave","userConfig","changeCounter","setChangeCounter","fetchConfig","GET","useEffect","useDebounce","POST","DELETE","useUserConfig","newClassNames","slice","push","setTimeout","userCfg","setRewards","data","useRewards","DashboardContainer","join","type","checked","Redemptions","Bttv","Active","onChange","e","newConfig","parse","target","value","Title","spellCheck","defaultContext","state","twitchClientId","baseUrl","scToken","setState","store","createContext","Provider","StateProvider","children","LoginContainer","Login","useContext","LoggedIn","href","createOAuthUrl","toString","ButtonsContainer","LoggedInContainer","DashboardButton","loginText","setLoginText","to","onMouseEnter","onMouseLeave","clientId","url","URL","searchParams","set","MetaContainer","Meta","activeChannels","joinedChannels","ProfilePicture","width","height","RecordsContainer","Records","records","record","RecordComponent","RecordConatiner","scores","score","user","profilePicture","displayName","EventService","callback","connect","ws","WebSocket","replace","onmessage","event","onclose","console","log","reason","onerror","err","error","close","AppContainer","main","App","setJoinedChannels","setActiveChannels","setRecords","message","GlobalStyle","createGlobalStyle","ReactDOM","render","Fragment","getElementById"],"mappings":"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","file":"static/js/main.bccf5ba5.chunk.js","sourcesContent":["import { getCookie } from \"./cookie\"\n\nexport enum Method {\n    GET = \"GET\",\n    POST = \"POST\",\n    DELETE = \"POST\"\n}\n\nexport async function doFetch(method: Method, path: string, body: any = undefined) {\n    const token = getCookie(\"scToken\");\n    const headers: Record<string, string> = { 'content-type': 'application/json' }\n    if (token) {\n        headers.Authorization = `Bearer ${token}`\n    }\n\n    const config: RequestInit = {\n        method: method,\n        headers: {\n            ...headers,\n        },\n    }\n\n    if (body) {\n        config.body = JSON.stringify(body)\n    }\n\n    return window.fetch(`${process.env.REACT_APP_API_BASE_URL}${path}`, config)\n        .then(async response => {\n            if (response.status === 401) {\n                window.location.assign(\"/\")\n                return\n            }\n            if (response.ok) {\n                return await response.json()\n            } else {\n                const errorMessage = await response.text()\n                return Promise.reject(new Error(errorMessage))\n            }\n        })\n}","export function getCookie(name: string): string | null {\n    const v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\n    return v ? v[2] : null;\n}\n\nexport function setCookie(name: string, value: string, days: number) {\n    const d = new Date();\n    d.setTime(d.getTime() + 24 * 60 * 60 * 1000 * days);\n    document.cookie = name + \"=\" + value + \";path=/;expires=\" + d.toUTCString();\n}\n\nexport function deleteCookie(name: string) {\n    setCookie(name, '', -1);\n}\n","import styled from \"styled-components\";\nimport { UserConfig } from \"../hooks/useUserConfig\";\n\n\nconst ResetContainer = styled.div`\n    position: absolute;\n    top: 1rem;\n    left: 1rem;\n    display: block;\n    color: white;\n    padding: 1rem 1rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--danger-dark);\n    cursor: pointer;\n\n    &:hover {\n        background: var(--danger);\n    }\n`;\n\nexport function Reset({ setUserConfig }: { setUserConfig: (userConfig: UserConfig | null) => void }) {\n    return <ResetContainer onClick={() => {\n        if (window.confirm(`Do you really want to reset?\\n- Channel Point Rewards from spamchamp\\n- Settings on spamchamp.gempir.com\\n- Unsubscribes all webhooks for your channel`)) {\n            setUserConfig(null);\n        }\n    }}>Reset</ResetContainer>;\n}","import styled from \"styled-components\";\nimport { Reward as RewardInterface } from \"../hooks/useRewards\";\n\nconst RewardsContainer = styled.div`\n    display: grid;\n    grid-gap: 1rem;\n`;\n\nconst RewardContainer = styled.div`\n    background: var(--bg-bright);\n    border: 1px solid var(--bg-brighter);\n    padding: 0.5rem;\n\n    .container {\n        display: grid;\n        grid-template-columns: 56px 1fr;\n        grid-gap: 1rem;\n    }\n`;\n\nexport function Rewards({ rewards }: { rewards: Array<RewardInterface> }) {\n    return <RewardsContainer>\n        {rewards.map(reward => <RewardContainer key={reward.id}>\n            <div className=\"container\">\n                <img src={reward.image?.url_2x ?? reward.default_image.url_2x} alt={reward.title} />\n                <div>\n                    <h5>{reward.title}</h5>\n                    <p>{reward.prompt}</p>\n                </div>\n            </div>\n        </RewardContainer>)}\n    </RewardsContainer>\n\n}","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useRewards } from \"../hooks/useRewards\";\nimport { useUserConfig } from \"../hooks/useUserConfig\";\nimport { Reset } from \"./Reset\";\nimport { Rewards } from \"./Rewards\";\n\nexport function Dashboard() {\n    const [classNames, setClassNames] = useState([\"userConfig\"]);\n\n    const [userCfg, setUserConfig] = useUserConfig(() => {\n        const newClassNames = classNames.slice();\n        newClassNames.push(\"saved\");\n        setClassNames(newClassNames)\n\n        setTimeout(() => {\n            setClassNames([\"userConfig\"]);\n        }, 500);\n    });\n\n    const [rewards] = useRewards();\n\n    return <DashboardContainer>\n        {userCfg && <Reset setUserConfig={setUserConfig} />}\n        {userCfg && <div className={classNames.join(\" \")}>\n            <div className={\"redemption\"}>\n                <img src=\"/images/bttv.png\" alt={\"bttv\"} />\n                <label className=\"switch\">\n                    <input type=\"checkbox\" checked={userCfg.Redemptions.Bttv.Active} onChange={(e) => {\n                        const newConfig = JSON.parse(JSON.stringify(userCfg));\n                        newConfig.Redemptions.Bttv.Active = e.target.checked;\n\n                        setUserConfig(newConfig);\n                    }} />\n                    <span className=\"slider round\"></span>\n                </label>\n                <div className=\"redemption-title\">\n                    <span>Channel Points Reward Name</span>\n                    <input type=\"text\" value={userCfg.Redemptions.Bttv.Title} spellCheck={false} onChange={(e) => {\n                        const newConfig = JSON.parse(JSON.stringify(userCfg));\n                        newConfig.Redemptions.Bttv.Title = e.target.value;\n\n                        setUserConfig(newConfig);\n                    }} />\n                </div>\n                <span className=\"hint\">\n                    make sure <strong>gempbot</strong> is bttv editor\n                </span>\n            </div>\n        </div>}\n        <Rewards rewards={rewards} />\n    </DashboardContainer>\n}\n\nconst DashboardContainer = styled.div`\n    margin-top: 5rem;\n    margin-left: 1rem;\n    margin-right: 1rem;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 2rem;\n\n    .userConfig {\n        padding-bottom: 2rem;\n        background: var(--bg);\n        transition: background-color ease-in-out 0.2s;\n\n        &.saved {\n            background: var(--theme);\n        }\n    }\n\n    .redemption {\n        display: flex;\n        align-items: center;\n        background: var(--bg-bright);\n        border: 1px solid var(--bg-brighter);\n        padding: 0.5rem;\n\n        img {\n            max-height: 3rem;\n            margin-left: 1rem;\n            margin-right: 2rem;\n        }\n\n        .redemption-title {\n            position: relative;\n\n            span {\n                position: absolute;\n                top: -13px;\n                left: 18px;\n                font-size: 11px;\n            }\n\n            input {\n                margin: 0;\n                padding: 0;\n                margin-left: 1rem;\n                font-size: 1rem;\n                background: var(--bg);\n                border: 1px solid var(--bg-bright);\n                padding: 5px;\n                color: white;\n\n                &:focus {\n                    outline: none;\n                    border: 1px solid var(--theme2);\n                }\n            }\n        }\n        \n        .hint {\n            margin-left: 1rem;\n\n            strong {\n                color: var(--theme-bright);\n            }\n        }\n    }\n\n    /* The switch - the box around the slider */\n    .switch {\n        position: relative;\n        display: inline-block;\n        width: 60px;\n        height: 34px;\n\n        input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n        }\n    }\n    /* The slider */\n    .slider {\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: #ccc;\n        -webkit-transition: .4s;\n        transition: .4s;\n\n        &:before {\n            position: absolute;\n            content: \"\";\n            height: 26px;\n            width: 26px;\n            left: 4px;\n            bottom: 4px;\n            background-color: white;\n            -webkit-transition: .4s;\n            transition: .4s;\n        }\n    }\n\n    input:checked + .slider {\n        background-color: var(--theme-bright);\n    }\n\n    input:focus + .slider {\n     box-shadow: 0 0 1px var(--theme-bright);\n    }\n\n    input:checked + .slider:before {\n        -webkit-transform: translateX(26px);\n        -ms-transform: translateX(26px);\n        transform: translateX(26px);\n    }\n\n    .slider.round {\n        border-radius: 34px;\n\n        &:before {\n            border-radius: 50%;\n        }\n    }\n`;","import { useEffect, useState } from \"react\";\nimport { useDebounce } from \"react-use\";\nimport { doFetch, Method } from \"../service/doFetch\";\n\nexport interface UserConfig {\n    Redemptions: Redemptions;\n}\n\nexport interface Redemptions {\n    Bttv: Redemption;\n}\n\nexport interface Redemption {\n    Title: string;\n    Active: boolean;\n}\n\n\nexport function useUserConfig(onSave: () => void): [UserConfig | null | undefined, (userConfig: UserConfig | null) => void] {\n    const [userConfig, setUserConfig] = useState<UserConfig | null | undefined>(undefined);\n    const [changeCounter, setChangeCounter] = useState(0);\n\n    const fetchConfig = () => {\n        doFetch(Method.GET, \"/api/userConfig\").then((userConfig) => setUserConfig(userConfig))\n    };\n\n    useEffect(fetchConfig, []);\n\n    useDebounce(() => {\n        if (changeCounter && userConfig) {\n            doFetch(Method.POST, \"/api/userConfig\", userConfig).then(onSave)\n        } else if (changeCounter && userConfig === null) {\n            doFetch(Method.DELETE, \"/api/userConfig\").then(fetchConfig)\n        }\n    }, 500, [changeCounter]);\n\n    const setCfg = (config: UserConfig | null) => {\n        setUserConfig(config);\n        setChangeCounter(changeCounter + 1);\n    };\n\n    return [userConfig, setCfg]\n}","import { useEffect, useState } from \"react\";\nimport { doFetch, Method } from \"../service/doFetch\";\n\nexport interface Reward {\n    broadcaster_name: string;\n    broadcaster_login: string;\n    broadcaster_id: string;\n    id: string;\n    image: Image | null;\n    background_color: string;\n    is_enabled: boolean;\n    cost: number;\n    title: string;\n    prompt: string;\n    is_user_input_required: boolean;\n    max_per_stream_setting: MaxPerStreamSetting;\n    max_per_user_per_stream_setting: MaxPerUserPerStreamSetting;\n    global_cooldown_setting: GlobalCooldownSetting;\n    is_paused: boolean;\n    is_in_stock: boolean;\n    default_image: Image;\n    should_redemptions_skip_request_queue: boolean;\n    redemptions_redeemed_current_stream: null;\n    cooldown_expires_at: null;\n}\n\nexport interface Image {\n    url_1x: string;\n    url_2x: string;\n    url_4x: string;\n}\n\nexport interface GlobalCooldownSetting {\n    is_enabled: boolean;\n    global_cooldown_seconds: number;\n}\n\nexport interface MaxPerStreamSetting {\n    is_enabled: boolean;\n    max_per_stream: number;\n}\n\nexport interface MaxPerUserPerStreamSetting {\n    is_enabled: boolean;\n    max_per_user_per_stream: number;\n}\n\nexport function useRewards() {\n    const [rewards, setRewards] = useState<Array<Reward>>([]);\n\n    const fetchRewards = () => {\n        doFetch(Method.GET, \"/api/rewards\").then(response => setRewards(response.data));\n    };\n\n    useEffect(fetchRewards, []);\n\n    return [rewards];\n}\n\n","import { createContext, useState } from \"react\";\nimport { getCookie } from \"./service/cookie\";\n\nexport interface State {\n    twitchClientId: string,\n    baseUrl: string,\n    scToken: string | null,\n}\n\nexport type Action = Record<string, unknown>;\n\nconst defaultContext = {\n    state: {\n        twitchClientId: process.env.REACT_APP_TWITCH_CLIENT_ID,\n        baseUrl: process.env.REACT_APP_BASE_URL,\n        scToken: getCookie(\"scToken\") ,\n    } as State,\n    setState: (state: State) => { },\n};\n\nconst store = createContext(defaultContext);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }: { children: JSX.Element }): JSX.Element => {\n    const [state, setState] = useState({ ...defaultContext.state });\n\n    return <Provider value={{ state, setState }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","import { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { store } from \"./../store\";\n\nconst LoginContainer = styled.a`\n    position: absolute;\n    display: block;\n    color: white;\n    top: 1rem;\n    right: 1rem;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--twitch);\n\n    &:hover {\n        background: var(--twitch-dark);\n    }\n`;\n\nexport function Login() {\n    const { state } = useContext(store);\n    \n    if (state.scToken) {\n        return <LoggedIn />;\n    }\n\n    return <LoginContainer href={createOAuthUrl(state.twitchClientId).toString()}>Login</LoginContainer>;\n}\n\nconst ButtonsContainer = styled.div`\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    display: flex;\n\n    a {\n        text-decoration: none;\n    }\n`;\n\nconst LoggedInContainer = styled.a`\n    display: block;\n    color: white;\n    width: 150px;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--twitch);\n    cursor: pointer;\n\n    &:hover {\n        background: var(--twitch-dark);\n    }\n`;\n\nconst DashboardButton = styled.div`\n    display: block;\n    color: white;\n    margin-right: 1rem;\n    padding: 1rem 2rem;\n    text-decoration: none;\n    font-weight: bold;\n    border-radius: 3px;\n    background: var(--theme2-dark);\n    cursor: pointer;\n\n    &.dashboard {\n        background: var(--theme);\n\n        &:hover {\n        background: var(--theme-bright);\n    }\n    }\n\n    &:hover {\n        background: var(--theme2);\n    }\n`;\n\nfunction LoggedIn() {\n    const { state } = useContext(store);\n    const [loginText, setLoginText] = useState(\"Logged In\");\n\n    return <ButtonsContainer>\n        <Link to=\"/\">\n            <DashboardButton>\n                Home\n            </DashboardButton>\n        </Link>\n        <Link to=\"/dashboard\">\n            <DashboardButton className=\"dashboard\">\n                Dashboard\n            </DashboardButton>\n        </Link>\n        <LoggedInContainer href={createOAuthUrl(state.twitchClientId).toString()} onMouseEnter={() => setLoginText(\"force login\")} onMouseLeave={() => setLoginText(\"Logged In\")}>\n            {loginText}\n        </LoggedInContainer>\n    </ButtonsContainer>;\n}\n\nfunction createOAuthUrl(clientId: string): URL {\n    const url = new URL(\"https://id.twitch.tv/oauth2/authorize\")\n    url.searchParams.set(\"client_id\", clientId);\n    url.searchParams.set(\"redirect_uri\", process.env.REACT_APP_API_BASE_URL + \"/api/callback\");\n    url.searchParams.set(\"response_type\", \"code\");\n    url.searchParams.set(\"claims\", JSON.stringify({ \"userinfo\": { \"picture\": null, \"preferred_username\": null, } }));\n    url.searchParams.set(\"scope\", \"channel:read:redemptions channel:manage:redemptions\");\n\n    return url;\n}","import styled from \"styled-components\";\n\nconst MetaContainer = styled.div`\n    display: inline-block;\n    background: var(--bg-bright);\n    border: 1px solid var(--bg-brighter);\n    padding: 0.5rem;\n    margin: 1rem;\n    margin-right: 0;\n    margin-bottom: 0;\n`;\n\nexport function Meta({ activeChannels, joinedChannels }: { [key: string]: number }) {\n    return <>\n        <MetaContainer>\n            Joined Channels: <strong>{joinedChannels}</strong>\n        </MetaContainer>\n        <MetaContainer>\n            Active Channels: <strong>{activeChannels}</strong>\n        </MetaContainer>\n    </>\n}","export function ProfilePicture({ src }: { src: string } = { src: \"https://static-cdn.jtvnw.net/user-default-pictures-uv/cdd517fe-def4-11e9-948e-784f43822e80-profile_image-70x70.png\" }) {\r\n    return <img src={src} width={\"30\"} height={\"30\"} alt=\"profile\" />;\r\n}","import styled from \"styled-components\";\nimport { ProfilePicture } from \"./ProfilePicture\";\nimport { Record } from \"../types/Events\";\n\nconst RecordsContainer = styled.div`\n    display: flex;\n`;\n\nexport function Records({ records }: { records: Array<Record> }) {\n    return <RecordsContainer>\n        {records.map(record => <RecordComponent key={record.title} record={record} />)}\n\n    </RecordsContainer>\n}\n\nconst RecordConatiner = styled.div`\n    background: var(--bg-bright);\n    border: 1px solid var(--bg-brighter);\n    margin: 1rem;\n    margin-right: 0;\n    padding: 1rem;\n\n    h2 {\n        color: var(--text);\n        margin: 0;\n        margin-bottom: 1rem;\n        padding: 0;\n    }\n\n    ol {\n        color: white;\n        font-size: 1.5rem;\n        font-weight: bold;\n        width: 500px;\n        padding: 0;\n        margin: 0;\n        margin-right: 15px;\n        background: var(--lightBackground);\n        border: 1px solid var(--lightBorder);\n        border-radius: 3px;\n\n        li {\n            display: flex;\n            align-items: center;\n            margin-bottom: 0.25rem;\n\n            img {\n                margin-right: 10px;\n            }\n\n            .value {\n                text-align: right;\n                flex: 1 1 auto;\n            }\n        }\n    }\n`;\n\nfunction RecordComponent({ record }: { record: Record }) {\n    return <RecordConatiner>\n        <h2>{record.title}</h2>\n        <ol>\n            {record.scores.map(score => <li key={score.user.id}>\n                <ProfilePicture src={score.user.profilePicture} />\n                <span>{score.user.displayName}</span>\n                <span className={\"value\"}>{score.score}</span>\n            </li>)}\n        </ol>\n    </RecordConatiner>\n}","import { EventMessage } from \"../types/Events\";\n\nexport default class EventService {\n    constructor(callback: (data: EventMessage) => void) {\n\n        function connect() {\n            var ws = new WebSocket(`${process.env.REACT_APP_API_BASE_URL!.replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\")}/api/ws`);\n            \n            ws.onmessage = (event) => {\n                callback(JSON.parse(event.data));\n            };\n\n            ws.onclose = e => {\n                console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                setTimeout(connect, 1000);\n            };\n\n            ws.onerror = err => {\n                console.error('Socket encountered error: ', err, 'Closing socket');\n                ws.close();\n            };\n        }\n\n        connect();\n    }\n}\n\n","import { useEffect, useState } from \"react\";\nimport {\n    BrowserRouter as Router,\n\n    Route, Switch\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Login } from \"./components/Login\";\nimport { Meta } from \"./components/Meta\";\nimport { Records } from \"./components/Records\";\nimport EventService from \"./service/EventService\";\nimport { EventMessage, Record } from \"./types/Events\";\n\nconst AppContainer = styled.main``;\n\nexport function App() {\n    const [joinedChannels, setJoinedChannels] = useState(0);\n    const [activeChannels, setActiveChannels] = useState(0);\n    const [records, setRecords] = useState<Array<Record>>([])\n\n    useEffect(() => {\n        new EventService((message: EventMessage) => {\n            setJoinedChannels(message.joinedChannels);\n            setActiveChannels(message.activeChannels);\n            setRecords(message.records);\n        });\n    }, []);\n\n    return <AppContainer>\n        <Router>\n            <Login />\n            <Switch>\n                <Route path=\"/dashboard\">\n                    <Dashboard />\n                </Route>\n                <Route path=\"/\">\n                    <Meta activeChannels={activeChannels} joinedChannels={joinedChannels} />\n                    <Records records={records} />\n                </Route>\n            </Switch>\n        </Router>\n\n    </AppContainer>\n}","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport { App } from './App';\nimport { StateProvider } from './store';\n\nconst GlobalStyle = createGlobalStyle`\n    body {\n        --bg: #0e0e10;\n        --bg-bright: #18181b;\n        --bg-brighter: #3d4146;\n        --bg-dark: #121416;\n        --theme: #009148;\n        --theme-bright: #00a552;\n        --theme2: #2980b9;\n        --theme2-bright: #3498db;\n        --theme2-dark: #24618a;\n        --text: #F5F5F5;\n        --text-dark: #616161;\n        --twitch: #6441a5;\n        --twitch-dark: #4c317e;\n        --danger: #e74c3c;\n        --danger-dark: #c0392b;\n\n        background: var(--bg);\n        margin: 0;\n        padding: 0;\n        color: var(--text);\n        margin: 0;\n        font-family: Helvetica, Arial, sans-serif;\n        height: 100%;\n        width: 100%;\n\n        * {\n            box-sizing: border-box;\n        }\n    }\n`\n\nReactDOM.render(\n    <StrictMode>\n        <StateProvider>\n            <React.Fragment>\n                <GlobalStyle />\n                <App />\n            </React.Fragment>\n        </StateProvider>\n    </StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}