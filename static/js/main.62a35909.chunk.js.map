{"version":3,"sources":["service/EventService.ts","store.tsx","App.tsx","index.tsx"],"names":["EventService","apiBaseUrl","callback","connect","ws","WebSocket","replace","onmessage","event","JSON","parse","data","onclose","e","console","log","reason","setTimeout","onerror","err","error","close","defaultContext","state","process","setState","store","createContext","Provider","StateProvider","children","useState","value","AppContainer","styled","main","App","useContext","joinedChannels","setJoinedChannels","activeChannels","setActiveChannels","useEffect","message","GlobalStyle","createGlobalStyle","ReactDOM","render","Fragment","document","getElementById"],"mappings":"uKAEqBA,EACjB,WAAYC,EAAoBC,GAAyC,oBAErE,SAASC,IACL,IAAIC,EAAK,IAAIC,UAAJ,UAAiBJ,EAAWK,QAAQ,WAAY,UAAUA,QAAQ,UAAW,SAA7E,YAETF,EAAGG,UAAY,SAACC,GACZN,EAASO,KAAKC,MAAMF,EAAMG,QAG9BP,EAAGQ,QAAU,SAAAC,GACTC,QAAQC,IAAI,6DAA8DF,EAAEG,QAC5EC,WAAWd,EAAS,MAGxBC,EAAGc,QAAU,SAAAC,GACTL,QAAQM,MAAM,6BAA8BD,EAAK,kBACjDf,EAAGiB,SAIXlB,I,eCfFmB,EAAiB,CACnBC,MAAO,CACHtB,WAAYuB,oCAEhBC,SAAU,SAACF,MAGTG,EAAQC,wBAAcL,GACpBM,EAAaF,EAAbE,SAEFC,EAAgB,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,SAAuD,EAClDC,mBAAS,eAAKT,EAAeC,QADqB,mBACrEA,EADqE,KAC9DE,EAD8D,KAG5E,OAAO,cAACG,EAAD,CAAUI,MAAO,CAAET,QAAOE,YAA1B,SAAuCK,KCf5CG,EAAeC,IAAOC,KAAV,kCAIX,SAASC,IAAO,IACXb,EAAUc,qBAAWX,GAArBH,MADU,EAE0BQ,mBAAS,GAFnC,mBAEXO,EAFW,KAEKC,EAFL,OAG0BR,mBAAS,GAHnC,mBAGXS,EAHW,KAGKC,EAHL,KAYlB,OAPAC,qBAAU,WACN,IAAI1C,EAAauB,EAAMtB,YAAY,SAAC0C,GAChCJ,EAAkBI,EAAQL,gBAC1BG,EAAkBE,EAAQH,qBAE/B,CAACjB,EAAMtB,aAEH,eAACgC,EAAD,+BACeK,EADf,uBACmDE,KCjB9D,IAAMI,EAAcC,YAAH,0eAwBjBC,IAASC,OACL,cAAC,aAAD,UACI,cAAC,EAAD,UACI,eAAC,IAAMC,SAAP,WACI,cAACJ,EAAD,IACA,cAACR,EAAD,WAIZa,SAASC,eAAe,W","file":"static/js/main.62a35909.chunk.js","sourcesContent":["import { EventMessage } from \"../types/Events\";\n\nexport default class EventService {\n    constructor(apiBaseUrl: string, callback: (data: EventMessage) => void) {\n\n        function connect() {\n            var ws = new WebSocket(`${apiBaseUrl.replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\")}/api/ws`);\n            \n            ws.onmessage = (event) => {\n                callback(JSON.parse(event.data));\n            };\n\n            ws.onclose = e => {\n                console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                setTimeout(connect, 1000);\n            };\n\n            ws.onerror = err => {\n                console.error('Socket encountered error: ', err, 'Closing socket');\n                ws.close();\n            };\n        }\n\n        connect();\n    }\n}\n\n","import { createContext, useState } from \"react\";\n\nexport interface State {\n    apiBaseUrl: string,\n}\n\nexport type Action = Record<string, unknown>;\n\nconst defaultContext = {\n    state: {\n        apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\n    } as State,\n    setState: (state: State) => { },\n};\n\nconst store = createContext(defaultContext);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }: { children: JSX.Element }): JSX.Element => {\n    const [state, setState] = useState({ ...defaultContext.state });\n\n    return <Provider value={{ state, setState }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","import { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport EventService from \"./service/EventService\";\nimport { store } from \"./store\";\nimport { EventMessage } from \"./types/Events\";\n\nconst AppContainer = styled.main`\n    \n`\n\nexport function App() {\n    const { state } = useContext(store);\n    const [joinedChannels, setJoinedChannels] = useState(0);\n    const [activeChannels, setActiveChannels] = useState(0);\n\n    useEffect(() => {\n        new EventService(state.apiBaseUrl, (message: EventMessage) => {\n            setJoinedChannels(message.joinedChannels);\n            setActiveChannels(message.activeChannels);\n        });\n    }, [state.apiBaseUrl])\n\n    return <AppContainer>\n        Joined Channels: {joinedChannels} | Active Channels: {activeChannels}\n    </AppContainer>\n}","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport { App } from './App';\nimport { StateProvider } from './store';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    --bg: #0e0e10;\n    --bg-bright: #18181b;\n    --bg-brighter: #3d4146;\n    --bg-dark: #121416;\n    --theme: #00CC66;\n    --theme-bright: #00FF80;\n    --theme2: #2980b9;\n    --theme2-bright: #3498db;\n    --text: #F5F5F5;\n    --text-dark: #616161;\n\n    background: var(--bg);\n    margin: 0;\n    padding: 0;\n    color: var(--text);\n    margin: 0;\n    font-family: Helvetica, Arial, sans-serif;\n    height: 100%;\n    width: 100%;\n  }\n`\n\nReactDOM.render(\n    <StrictMode>\n        <StateProvider>\n            <React.Fragment>\n                <GlobalStyle />\n                <App />\n            </React.Fragment>\n        </StateProvider>\n    </StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}